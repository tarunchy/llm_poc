import os
import numpy as np
import tensorflow as tf
from tensorflow.keras.preprocessing.text import Tokenizer
from tensorflow.keras.preprocessing.sequence import pad_sequences
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Embedding, LSTM, Dense
from tensorflow.keras.optimizers import Adam

class SimpleLSTMModel:

    def __init__(self, training_file='training_data.txt'):
        self.tokenizer = Tokenizer()
        self.model = self.build_model(training_file)

    def build_model(self, training_file):
        with open(training_file, 'r') as f:
            training_data = f.read()

        self.tokenizer.fit_on_texts([training_data])
        total_words = len(self.tokenizer.word_index) + 1

        input_sequences = []
        for line in training_data.split('\n'):
            token_list = self.tokenizer.texts_to_sequences([line])[0]
            for i in range(1, len(token_list)):
                n_gram_sequence = token_list[:i+1]
                input_sequences.append(n_gram_sequence)

        max_sequence_len = max([len(x) for x in input_sequences])
        input_sequences = np.array(pad_sequences(input_sequences, maxlen=max_sequence_len, padding='pre'))

        xs, labels = input_sequences[:,:-1],input_sequences[:,-1]
        ys = tf.keras.utils.to_categorical(labels, num_classes=total_words)

        model = Sequential()
        model.add(Embedding(total_words, 64, input_length=max_sequence_len-1))
        model.add(LSTM(20))
        model.add(Dense(total_words, activation='softmax'))
        model.compile(loss='categorical_crossentropy', optimizer=Adam(lr=0.01), metrics=['accuracy'])
        model.fit(xs, ys, epochs=100, verbose=1)

        return model

    def predict_next_word(self, input_text):
        token_list = self.tokenizer.texts_to_sequences([input_text])[0]
        token_list = pad_sequences([token_list], maxlen=model.layers[0].input_shape[1], padding='pre')
        predicted = np.argmax(self.model.predict(token_list), axis=-1)
        output_word = ""
        for word,index in self.tokenizer.word_index.items():
            if index == predicted:
                output_word = word
                break
        return output_word

    def update(self, new_text):
        self.build_model(new_text)

